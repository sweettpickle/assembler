	.model tiny ;определяем модель памяти, программа формата .com
	.code ;задаем начало сегмента кода
	org 100h ;смещаем адрес кода на 100h байт

Start: ;начало программа, блок ввода
	mov ah, 10h ;функция 0 прерывания 16
	int 16h ;ожидает нажатие клавиши и заносит расшир код ASCII в ah
	cmp al, 13 ;сравниваем код нажатой клавиши с enter
	je is_enter ;если равен, то переходим в блок is_enter
	cmp al, 1Bh ;сравниваем код нажатой клавиши с escape 
	je is_out ;если равен, то переходим в блок is_out

	cmp ah, 86h ;сравниванием код нажатой клавиши с f12
	je is_f12 ;если нажали f12, то переходим в блок is_f12

	mov dl, al ;помещаем в регистр dl содержимое регистра al 
	mov ah, 2 ;вызываем 2 функцию 21 прерывания
	int 21h ;которая выводит символ из dl на экран
	
	jmp Start ;переходим в начало программы

is_f12: ;блок, если нажали f12
	call beep ;вызываем процесс beep, который издает писк
	jmp Start ;переходим в начало программы

beep proc ;процесс, который задает писк
	in al, 61h ;получить состояние порта в al
	or al, 00000011b ;установить биты 0 и 1 в 1
	out 61h, al ;включить динамик 

	mov al, 2h ;высота звука
	out 42h, al ;включаем таймер
	
	mov cx, 1 ;продолжительность звука
	mov ah, 86h ;функция 86h
	int 15h ;пауза 
	
	in al, 61h ;получаем состояние динамика
	and al, 11111100b ;обнуляем младшие биты
	out 61h, al ;теперь динамик выключен 
 
	ret ;аналогично return
beep endp ;конец процесса

is_enter: ;блок, если нажали enter
	mov dl, 0Dh ;перевод каретки
	mov ah, 2 ;функция вывода на экран
	int 21h ;вызов прерывания
	mov dl, 0Ah ;перевод строки 
	int 21h ;вызов прерывания 
	jmp Start ;переход в начало программы

is_out:
	mov ah, 2 ;функция вывода на экран
	mov dl, 0Dh ;перевод каретки
	int 21h ;вызов прерывания
	int 20h ;выход из программы

end Start ;конец программы
